---
interface Props {
  url: string;
  title?: string;
  author?: string; // はてなユーザー名
  postId?: number; // 記事ID（ブログ記事の場合）
  contentType?: 'blog' | 'diary'; // コンテンツタイプ
}

const { url, title, author, postId, contentType } = Astro.props;
const isDev = import.meta.env.DEV;

// 実験的に特定のブログ記事のみにスターを表示
const experimentalBlogPostIds = [2]; // ID: 2のブログ記事のみ
const shouldShowStar = contentType === 'blog' && postId && experimentalBlogPostIds.includes(postId);
---

{shouldShowStar && (
  <div class="hatena-star-container my-4 py-3">
    <div class="hatena-star-star-container" data-hatena-star-uri={url} data-hatena-star-title={title} data-hatena-star-author={author}>
      <!-- はてなスターがここに表示されます -->
      {isDev && (
        <div class="dev-star-placeholder flex items-center gap-3 text-sm text-gray-500 dark:text-gray-400">
          <span class="hatena-star-add-button-placeholder">☆ Add Star</span>
          <div class="flex items-center gap-1">
            <span class="text-yellow-500">★</span>
            <span class="text-yellow-500">★</span>
            <span class="text-yellow-500">★</span>
            <div class="flex items-center gap-1 ml-2">
              <div class="w-4 h-4 bg-blue-500 rounded-full"></div>
              <div class="w-4 h-4 bg-green-500 rounded-full"></div>
              <div class="w-4 h-4 bg-red-500 rounded-full"></div>
            </div>
          </div>
          <span class="text-xs text-gray-400 ml-2">（開発環境プレビュー）</span>
        </div>
      )}
    </div>
  </div>
)}

{!shouldShowStar && isDev && (
  <div class="hatena-star-container my-4 py-2 opacity-50">
    <span class="text-sm text-gray-400 italic">
      はてなスター（非表示: {contentType} {postId ? `ID ${postId}` : ''}）
    </span>
  </div>
)}

<script is:inline define:vars={{ url, title, author, isDev, shouldShowStar }}>
  // 開発環境では警告を表示
  if (isDev && typeof console !== 'undefined') {
    console.log('はてなスター開発モード:', { url, title, author, shouldShowStar });
    console.log('はてなスターは本番環境（https://www.kechiiiiin.com/）でのみ動作します');
  }

  // はてなスターのスクリプトを読み込み（本番環境かつ表示対象の場合のみ）
  if (!isDev && shouldShowStar) {
    (function() {
      if (typeof window.Hatena === 'undefined') {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://s.st-hatena.com/js/HatenaStar.js';
        script.async = true;
        script.onload = function() {
          initHatenaStar();
        };
        document.head.appendChild(script);
      } else {
        initHatenaStar();
      }

      function initHatenaStar() {
        if (window.Hatena && window.Hatena.Star) {
          // はてなスターの設定
          window.Hatena.Star.SiteConfig = {
            entryNodes: {
              'div.hatena-star-star-container': {
                uri: 'data-hatena-star-uri',
                title: 'data-hatena-star-title',
                container: 'div.hatena-star-star-container'
              }
            }
          };
          
          // 管理者が指定されている場合は追加
          if (author) {
            window.Hatena.Star.SiteConfig.entryNodes['div.hatena-star-star-container'].author = 'data-hatena-star-author';
          }
          
          // エントリーを読み込み
          if (window.Hatena.Star.EntryLoader) {
            window.Hatena.Star.EntryLoader.loadEntries();
          }
        }
      }
    })();
  }
</script>

<style>
  .hatena-star-container {
    border-top: 1px solid #e5e7eb;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .dark .hatena-star-container {
    border-color: #374151;
  }
  
  .hatena-star-star-container {
    min-height: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .hatena-star-add-button-placeholder {
    color: #6b7280;
    font-size: 14px;
    cursor: pointer;
  }
  
  .hatena-star-add-button-placeholder:hover {
    color: #374151;
  }
  
  .dark .hatena-star-add-button-placeholder {
    color: #9ca3af;
  }
  
  .dark .hatena-star-add-button-placeholder:hover {
    color: #d1d5db;
  }

  /* はてなスターの実際のスタイル */
  :global(.hatena-star-star-container) {
    display: flex !important;
    align-items: center !important;
    gap: 4px !important;
  }

  :global(.hatena-star-add-button) {
    color: #6b7280 !important;
    font-size: 14px !important;
    text-decoration: none !important;
    margin-right: 8px !important;
    cursor: pointer !important;
  }

  :global(.hatena-star-add-button:hover) {
    color: #374151 !important;
  }

  :global(.hatena-star-star) {
    color: #fbbf24 !important;
    font-size: 16px !important;
    margin: 0 1px !important;
    text-decoration: none !important;
    display: inline-block !important;
  }

  :global(.hatena-star-star.yellow-star) {
    color: #fbbf24 !important;
  }

  :global(.hatena-star-star.red-star) {
    color: #ef4444 !important;
  }

  :global(.hatena-star-star.green-star) {
    color: #10b981 !important;
  }

  :global(.hatena-star-star.blue-star) {
    color: #3b82f6 !important;
  }

  :global(.hatena-star-star.purple-star) {
    color: #8b5cf6 !important;
  }

  :global(.hatena-star-comment-container) {
    display: inline-flex !important;
    align-items: center !important;
    gap: 2px !important;
    margin-left: 4px !important;
  }

  :global(.hatena-star-inner-count) {
    font-size: 12px !important;
    color: #6b7280 !important;
    margin-right: 4px !important;
  }

  :global(.dark .hatena-star-add-button) {
    color: #9ca3af !important;
  }

  :global(.dark .hatena-star-add-button:hover) {
    color: #d1d5db !important;
  }

  :global(.dark .hatena-star-inner-count) {
    color: #9ca3af !important;
  }
</style> 