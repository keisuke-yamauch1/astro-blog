---
interface Props {
  url: string;
  title?: string;
  author?: string; // はてなユーザー名
  postId?: number; // 記事ID（ブログ記事の場合）
  contentType?: 'blog' | 'diary'; // コンテンツタイプ
}

const { url, title, author, postId, contentType } = Astro.props;
const isDev = import.meta.env.DEV;

// 実験的に特定のブログ記事のみにスターを表示
const experimentalBlogPostIds = [2]; // ID: 2のブログ記事のみ
const shouldShowStar = contentType === 'blog' && postId && experimentalBlogPostIds.includes(postId);
---

{shouldShowStar && !isDev && (
  <div class="hatena-star-container my-4 py-3">
    <div class="hatena-star-entry">
      <!-- はてなスターがここに表示されます -->
    </div>
  </div>
)}

{shouldShowStar && isDev && (
  <div class="hatena-star-container my-4 py-3">
    <div class="dev-star-placeholder flex items-center gap-3 text-sm text-gray-500 dark:text-gray-400">
      <span class="hatena-star-add-button-placeholder">☆ Add Star</span>
      <div class="flex items-center gap-1">
        <span class="text-yellow-500">★</span>
        <span class="text-yellow-500">★</span>
        <span class="text-yellow-500">★</span>
        <div class="flex items-center gap-1 ml-2">
          <div class="w-4 h-4 bg-blue-500 rounded-full"></div>
          <div class="w-4 h-4 bg-green-500 rounded-full"></div>
          <div class="w-4 h-4 bg-red-500 rounded-full"></div>
        </div>
      </div>
      <span class="text-xs text-gray-400 ml-2">（開発環境プレビュー）</span>
    </div>
  </div>
)}

{!shouldShowStar && isDev && (
  <div class="hatena-star-container my-4 py-2 opacity-50">
    <span class="text-sm text-gray-400 italic">
      はてなスター（非表示: {contentType} {postId ? `ID ${postId}` : ''}）
    </span>
  </div>
)}

{shouldShowStar && !isDev && (
  <Fragment>
    <script type="text/javascript" set:html={`
      console.log('はてなスター設定開始:', {
        url: '${url}',
        title: '${title || ''}',
        postId: ${postId}
      });
      
      // はてなスターのスクリプトを動的に読み込み
      if (!window.Hatena) {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://s.st-hatena.com/js/HatenaStar.js'; // HTTPSに修正
        script.onload = function() {
          console.log('はてなスタースクリプト読み込み完了');
          initHatenaStar();
        };
        script.onerror = function() {
          console.error('はてなスタースクリプトの読み込みに失敗しました');
        };
        document.head.appendChild(script);
      } else {
        console.log('はてなスタースクリプトは既に読み込み済み');
        initHatenaStar();
      }
      
      function initHatenaStar() {
        if (window.Hatena && window.Hatena.Star) {
          console.log('はてなスター設定実行中...');
          
          window.Hatena.Star.SiteConfig = {
            entryNodes: {
              'div.hatena-star-entry': {
                uri: '${url}',
                title: '${title || document.title}',
                container: 'div.hatena-star-entry'
              }
            }
          };
          
          console.log('はてなスター設定完了:', window.Hatena.Star.SiteConfig);
          
          // エントリーを読み込み
          if (window.Hatena.Star.EntryLoader) {
            console.log('はてなスターエントリーローダー実行');
            window.Hatena.Star.EntryLoader.loadEntries();
          }
          
          // 少し遅延してからエントリーを確認
          setTimeout(function() {
            console.log('はてなスターエントリー確認:', document.querySelector('div.hatena-star-entry'));
          }, 2000);
        } else {
          console.error('Hatena.Starオブジェクトが見つかりません');
        }
      }
    `}></script>
  </Fragment>
)}

<style>
  .hatena-star-container {
    border-top: 1px solid #e5e7eb;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .dark .hatena-star-container {
    border-color: #374151;
  }
  
  .hatena-star-entry {
    min-height: 20px;
    padding: 4px 0;
  }
  
  .hatena-star-add-button-placeholder {
    color: #6b7280;
    font-size: 14px;
    cursor: pointer;
  }
  
  .hatena-star-add-button-placeholder:hover {
    color: #374151;
  }
  
  .dark .hatena-star-add-button-placeholder {
    color: #9ca3af;
  }
  
  .dark .hatena-star-add-button-placeholder:hover {
    color: #d1d5db;
  }

  /* はてなスターの実際のスタイル */
  :global(.hatena-star-add-button) {
    color: #6b7280 !important;
    font-size: 14px !important;
    text-decoration: none !important;
    margin-right: 8px !important;
    cursor: pointer !important;
  }

  :global(.hatena-star-add-button:hover) {
    color: #374151 !important;
  }

  :global(.hatena-star-star) {
    color: #fbbf24 !important;
    font-size: 16px !important;
    margin: 0 1px !important;
    text-decoration: none !important;
    display: inline-block !important;
  }

  :global(.hatena-star-star.yellow-star) {
    color: #fbbf24 !important;
  }

  :global(.hatena-star-star.red-star) {
    color: #ef4444 !important;
  }

  :global(.hatena-star-star.green-star) {
    color: #10b981 !important;
  }

  :global(.hatena-star-star.blue-star) {
    color: #3b82f6 !important;
  }

  :global(.hatena-star-star.purple-star) {
    color: #8b5cf6 !important;
  }

  :global(.dark .hatena-star-add-button) {
    color: #9ca3af !important;
  }

  :global(.dark .hatena-star-add-button:hover) {
    color: #d1d5db !important;
  }
</style> 