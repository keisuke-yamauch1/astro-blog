---
interface Props {
  url: string;
  title?: string;
  author?: string; // はてなユーザー名
  postId?: number; // 記事ID（ブログ記事の場合）
  contentType?: 'blog' | 'diary'; // コンテンツタイプ
}

const { url, title, author, postId, contentType } = Astro.props;
const isDev = import.meta.env.DEV;

// 実験的に特定のブログ記事のみにスターを表示
const experimentalBlogPostIds = [2]; // ID: 2のブログ記事のみ
const shouldShowStar = contentType === 'blog' && postId && experimentalBlogPostIds.includes(postId);
---

{shouldShowStar && (
  <div class="hatena-star-container my-4 py-2">
    <span class="hatena-star-inner-container" 
          data-hatena-star-uri={url} 
          data-hatena-star-title={title}
          data-hatena-star-author={author}>
      <!-- はてなスターがここに表示されます -->
      {isDev && (
        <span class="dev-star-placeholder text-sm text-gray-500 dark:text-gray-400">
          ⭐ はてなスター（本番環境でのみ表示されます）
          {author && <span class="block text-xs mt-1">管理者: {author}</span>}
          <span class="block text-xs mt-1">記事ID: {postId} ({contentType})</span>
        </span>
      )}
    </span>
  </div>
)}

{!shouldShowStar && isDev && (
  <div class="hatena-star-container my-4 py-2 opacity-50">
    <span class="text-sm text-gray-400 italic">
      はてなスター（非表示: {contentType} {postId ? `ID ${postId}` : ''}）
    </span>
  </div>
)}

<script is:inline define:vars={{ url, title, author, isDev, shouldShowStar }}>
  // 開発環境では警告を表示
  if (isDev && typeof console !== 'undefined') {
    console.log('はてなスター開発モード:', { url, title, author, shouldShowStar });
    console.log('はてなスターは本番環境（https://www.kechiiiiin.com/）でのみ動作します');
  }

  // はてなスターのスクリプトを読み込み（本番環境かつ表示対象の場合のみ）
  if (!isDev && shouldShowStar) {
    (function() {
      if (typeof window.Hatena === 'undefined') {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://s.st-hatena.com/js/HatenaStar.js';
        script.async = true;
        script.onload = function() {
          initHatenaStar();
        };
        document.head.appendChild(script);
      } else {
        initHatenaStar();
      }

      function initHatenaStar() {
        if (window.Hatena && window.Hatena.Star) {
          // はてなスターの設定
          const config = {
            entryNodes: {
              'span.hatena-star-inner-container': {
                uri: 'data-hatena-star-uri',
                title: 'data-hatena-star-title',
                container: 'span'
              }
            }
          };
          
          // 管理者が指定されている場合は追加
          if (author) {
            config.entryNodes['span.hatena-star-inner-container'].author = 'data-hatena-star-author';
          }
          
          window.Hatena.Star.SiteConfig = config;
          
          // エントリーを読み込み
          if (window.Hatena.Star.EntryLoader) {
            window.Hatena.Star.EntryLoader.loadEntries();
          }
        }
      }
    })();
  }
</script>

<style>
  .hatena-star-container {
    border-top: 1px solid #e5e7eb;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .dark .hatena-star-container {
    border-color: #374151;
  }
  
  .hatena-star-inner-container {
    display: block;
    min-height: 20px;
  }
  
  .dev-star-placeholder {
    font-style: italic;
  }
</style> 